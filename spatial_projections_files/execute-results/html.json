{
  "hash": "e731341afaf11c27e4dbbe51ce52ca3c",
  "result": {
    "markdown": "---\ntitle: \"Spatial Projections of a randomForest model\"\neditor: \n  mode: source\n---\n\nIn this workshop, we will create a spatial projection of our random forest model for monthly methane exchange from natural ecosystems. \n\nTo date, we have completed model calibration, validation, and sensitivity analysis. Next, we can apply the model to a landscape to estimate natural methane emissions. For this workshop, we will calculate Connecticut's natural emissions.\n\n### In this workshop, we will:\n\n(1) Make a list of the variables, their units, and the exact name and class of each variable in your model.\n\n(2) Determine where you can get a spatial version of each variable in your model.\n\n(3) Format each spatial layer to match the exact conditions of the data used to fit the model. \n\n(4) Make spatial predictions.\n\n(5) Use predictions to calculate an annual budget.\n\nLoad libraries:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nlibrary(tidyverse)\nlibrary(tidyterra)\n```\n:::\n\n\n# (1) Make a list of the variables, their units, the exact name and class of each variable in your model. \n\n<b>Datasets:</b> [data.zip](https://yale.instructure.com/courses/101353/files/10270118?wrap=1)\n\nLoad the datasets and the model. \n\n::: {.cell}\n\n```{.r .cell-code}\nload(file=\"data/final_model.RDATA\" )\n```\n:::\n\nThere are four items in this.RDATA file.  \n(1) the randomForest model,   \n(2) the flux net dataset,   \n(3) the training data, and   \n(4) the testing data.  \n\n### Look at the model to determine which variables are in it:\n\n::: {.cell}\n\n```{.r .cell-code}\nFCH4_F_gC.rf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n randomForest(formula = FCH4_F_gC ~ P_F + TA_F + Upland, data = train,      keep.forest = T, importance = TRUE, mtry = 1, ntree = 500,      keep.inbag = TRUE) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 4.40718\n                    % Var explained: 32.54\n```\n:::\n:::\n\nThe model includes precipitation in mm (P_F), mean air temperature in degrees Celsius (TA_F), and an indicator for upland ecosystems (Upland).\n\nCheck the class of each variable.\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(train$P_F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(train$TA_F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(train$Upland)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\nTo project this model in space, we need the following variables:\n\n(1) Monthly total precipitation in mm and the name of the layer needs to be \"P_F\"\n(2) Monthly mean air temperature in degrees Celsius and the layer name needs to be \"TA_F\"\n(3) We need an indicator for upland ecosystems called Upland. All inundated ecosystems (+ snow) are given the value \"0\" and non-inundated ecosystems are given the value \"1\". Croplands and urban areas should be filtered out of this layer. \n\n# (2) Determine where you can get a spatial version of each variable in your model.\nWe will spatialize the model for Connecticut in the year 2021.\n\n(1) Monthly total precipitation (mm): Terra climate (`getTerraClim()`). \n(2) Monthly mean air temperature temperature in degrees Celsius: Terra climate (`getTerraClim()`). \n(3) Indicator for Upland ecosystems (Upland): MODIS Land Cover Data (Majority_Land_Cover_Type_1).  downloaded from: (2001 - 2022) <https://lpdaac.usgs.gov/products/mcd12c1v061/> the user guide is available here: <https://lpdaac.usgs.gov/documents/101/MCD12_User_Guide_V6.pdf>. \n\n### To use raster layers with the predict function, they must have the same CRS, resolution, and extent!\n\n#(3) Format each spatial layer. \nDownload the climate layers needed for P_F and T_F using `getTerraClim()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(AOI)\nlibrary(climateR)\nlibrary(terra)\nlibrary(tidyverse)\n```\n:::\n\nCreate an AOI for Connecticut. \n\n::: {.cell}\n\n```{.r .cell-code}\nct <- AOI::aoi_get(state=\"CT\")\nplot(ct$geometry)\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nDownload terra climate data (Precipitation and air temperature) for 2021.\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal.clim.N <- ct %>% getTerraClim(varname = c(\"ppt\", \"tmin\", \"tmax\"), \n                                     startDate = \"2021-01-01\",\n                                     endDate = \"2021-12-31\")\n```\n:::\n\nSubset the data for each variable.\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal.clim.ppt <- global.clim.N$ppt\nglobal.clim.tmin <-global.clim.N$tmin\nglobal.clim.tmax <- global.clim.N$tmax \n```\n:::\n\nWe need mean air temperature. Calculate the mean using the maximum and minimum air temperature.\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal.clim.tmean <-   mean(global.clim.tmin, global.clim.tmax)\nglobal.clim.tmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \nsize        : 28, 48, 13  (nrow, ncol, nlyr)\nresolution  : 0.04166674, 0.04166679  (x, y)\nextent      : -73.75, -71.75, 40.91667, 42.08334  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=longlat +ellps=WGS84 +no_defs \nsource(s)   : memory\nnames       : tmin_~total, tmin_~total, tmin_~total, tmin_~total, tmin_~total, tmin_~total, ... \nmin values  :       -5.00,        -5.9,         1.3,        7.05,       12.20,       18.65, ... \nmax values  :        1.55,         1.3,         6.0,       11.15,       15.75,       22.00, ... \ntime        : 2021-01-01 to 2022-01-01 UTC (13 steps) \n```\n:::\n:::\n\nRemove the layers you no longer need. \n\n::: {.cell}\n\n```{.r .cell-code}\nrm(global.clim.tmin, global.clim.tmax)\n```\n:::\n\nSave the layers.\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(global.clim.tmean, \"data/TERRA_TMEAN_2021_CT.tif\", overwrite=TRUE )\nwriteRaster(global.clim.ppt, \"data/TERRA_PPT_2021_CT.tif\", overwrite=TRUE )\n```\n:::\n\nNow, we need to get the MODIS IGBP layers. The dataset provided was developed from MODIS Land Cover Data (Majority_Land_Cover_Type_1) downloaded from: (2001 - 2022) <https://lpdaac.usgs.gov/products/mcd12c1v061/>. This dataset was downloaded for the entire globe and cropped to include only Connecticut.\n\nLoad the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct <- terra::rast(\"data/MODIS_IGBP_2001-2022_CT.tif\")\nigbp.ct \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \nsize        : 22, 39, 22  (nrow, ncol, nlyr)\nresolution  : 0.05, 0.05  (x, y)\nextent      : -73.75, -71.8, 40.95, 42.05  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat Unknown datum based upon the Clarke 1866 ellipsoid \nsource      : MODIS_IGBP_2001-2022_CT.tif \nnames       : Major~ype_1, Major~ype_1, Major~ype_1, Major~ype_1, Major~ype_1, Major~ype_1, ... \nmin values  :           0,           0,           0,           0,           0,           0, ... \nmax values  :          14,          13,          14,          14,          14,          13, ... \ntime (raw)  : 992563200 to 1655251200 (22 steps) \n```\n:::\n\n```{.r .cell-code}\nigbp.ct[[1]] %>% plot\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nThis layer needs to be reformatted. Using the User Guide we can determine what each numerical value represents: <https://lpdaac.usgs.gov/documents/1409/MCD12_User_Guide_V61.pdf>\n\n1: ENF. \n2: EBF. \n3: DNF. \n4: DBF. \n5: MF. \n6: CS. \n7: OS. \n8: WS. \n9 : SAV. \n10 : GRA. \n11: WET. \n12 : CRO. \n13 : URB. \n14 : CRO. \n15 : SNO. \n16: Barren. \n17 : WAT. \n0: Unclassified. \n\nlook at the layer. Here I use\"[[1]]\" to see only the first layer, which is for the year 2001.\n\n::: {.cell}\n\n```{.r .cell-code}\nterra::plot(igbp.ct[[1]])\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nReclassify each value, one at a time, and think about how you should reclassify each. We want to give all uplands the value \"1\" and all inundated systems the value \"0\".\n\nFirst, make a copy of the raters (igbp.ct) and call it igbp.ct.r:\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct.r <- igbp.ct\n```\n:::\n\n\nReclassify 0 value to NA.\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct.r[ igbp.ct.r == 0] <- NA \nterra::plot(igbp.ct.r[[1]] )\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\nReclassify the other values:\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct.r[ igbp.ct.r == 1] <- 1 \nigbp.ct.r[ igbp.ct.r == 2] <- 1\nigbp.ct.r[ igbp.ct.r == 3] <- 1\nigbp.ct.r[ igbp.ct.r == 4] <- 1\nigbp.ct.r[ igbp.ct.r == 5] <- 1\nigbp.ct.r[ igbp.ct.r == 6] <- 1\nigbp.ct.r[ igbp.ct.r == 7] <- 1\nigbp.ct.r[ igbp.ct.r == 8] <- 1\nigbp.ct.r[ igbp.ct.r == 9] <- 1\nigbp.ct.r[ igbp.ct.r == 10] <- 1\nigbp.ct.r[ igbp.ct.r == 11] <- 0\nigbp.ct.r[ igbp.ct.r == 12] <- NA\nigbp.ct.r[ igbp.ct.r == 13] <- NA\nigbp.ct.r[ igbp.ct.r == 14] <- NA\nigbp.ct.r[ igbp.ct.r == 15] <- 0\nigbp.ct.r[ igbp.ct.r == 16] <- 1\nigbp.ct.r[ igbp.ct.r == 17] <- 0\n```\n:::\n\nLook at the final raster to ensure everything is reclassified to upland since Connecticut doesn't have anything else at the resolution of MODIS.\n\n::: {.cell}\n\n```{.r .cell-code}\nterra::plot(igbp.ct.r[[1]], col='red' ) \n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\nFormat the upland layer as a factor by first making a data frame that has the raster values 0 and 1 and the corresponding factor level. \n\n::: {.cell}\n\n```{.r .cell-code}\nfactors.df <- data.frame(id=c(1, 0), cover=c(\"upland\", \"inundated\"))\n```\n:::\n\nCreate a for loop to assign the factor levels to each raster layer one at a time:\n\n::: {.cell}\n\n```{.r .cell-code}\nfor ( i in 1:22){\n  print(i)\n  levels(igbp.ct.r[[i]]) <- factors.df\n  is.factor(igbp.ct.r)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21\n[1] 22\n```\n:::\n\n```{.r .cell-code}\nterra::plot(igbp.ct.r[[1]], col=\"red\" )\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\nWe only need the layer for 2021. Subset the 2021 layer.\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct.r.2021 <- igbp.ct.r[[21]]\n```\n:::\n\nWe will use the CRS of the terra climate layers and make everything match this.\n\n::: {.cell}\n\n```{.r .cell-code}\nigbp.ct.r.2021 <- terra::project( igbp.ct.r.2021, global.clim.ppt)\n```\n:::\n\nAll the resolutions must be the same to combine the rasters into one item. We will set the terra climate layers to match the igbp.ct.r layer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal.clim.tmean.resample <- resample( global.clim.tmean, igbp.ct.r.2021)\nglobal.clim.ppt.resample <- resample( global.clim.ppt, igbp.ct.r.2021)\n```\n:::\n\nNow, export the files to save a version processed as needed.\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(global.clim.tmean.resample, \"data/products/TERRA_TMEAN_2021_CT_rs.tif\", overwrite=TRUE )\nwriteRaster(global.clim.ppt.resample, \"data/products/TERRA_PPT_2021_CT_rs.tif\", overwrite=TRUE )\nwriteRaster(igbp.ct.r.2021, \"data/products/MODIS_Upland_2021_CT.tif\", overwrite=TRUE )\n```\n:::\n\n# (4) Make predictions\n\nCombine all the variables into a raster stack, only including one month since igbp.ct.r.2021 has one layer and the climate has 12, one for each month.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.rasters.m1 <- c(igbp.ct.r.2021, global.clim.tmean.resample[[1]], global.clim.ppt.resample[[1]] )\n```\n:::\n\nIf you have any issues combining the raster layers into one object, you may not have made everything the same resolution or extent.\n\nMake the names of the raster layers match the dataframe.\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(model.rasters.m1 ) <- c(\"Upland\", \"TA_F\", \"P_F\" )\nmodel.rasters.m1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \nsize        : 28, 48, 3  (nrow, ncol, nlyr)\nresolution  : 0.04166674, 0.04166679  (x, y)\nextent      : -73.75, -71.75, 40.91667, 42.08334  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=longlat +ellps=WGS84 +no_defs \nsource(s)   : memory\nnames       : Upland,  TA_F,  P_F \nmin values  : upland, -5.00, 41.2 \nmax values  : upland,  1.55, 65.6 \nunit        :       ,      ,   mm \n```\n:::\n:::\n\nCheck the dataframe again to ensure you don't need to make additional changes to the raster.\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(train$Upland )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nsummary(train$Upland )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninundated    upland \n      974       697 \n```\n:::\n\n```{.r .cell-code}\nlevels(train$Upland )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"inundated\" \"upland\"   \n```\n:::\n\n```{.r .cell-code}\nmodel.rasters.m1$Upland\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \nsize        : 28, 48, 1  (nrow, ncol, nlyr)\nresolution  : 0.04166674, 0.04166679  (x, y)\nextent      : -73.75, -71.75, 40.91667, 42.08334  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=longlat +ellps=WGS84 +no_defs \nsource(s)   : memory\ncategories  : cover \nname        : Upland \nmin value   : upland \nmax value   : upland \n```\n:::\n:::\n\nYou are ready to use the predict function to predict you model in space.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.rasters.m1.pred <- terra::predict(  object= model.rasters.m1, model=FCH4_F_gC.rf)\n\nplot(model.rasters.m1.pred)\n```\n\n::: {.cell-output-display}\n![](spatial_projections_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\nWe can do this in a for loop to get all 12 months.\n\nFirst, determine where you want to export the files to, and make a new folder there called predictions.\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd('data/products/') # sets the working directory to your products folder\ndirectory <- getwd() # saves the path to directory\nsubDir <- 'predictions' # You will use this to make the folder called predictions\n\ndir.create(file.path(directory , subDir)) # this makes the new folder in data called predictions\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in dir.create(file.path(directory, subDir)): '/Users/sm3466/YSE\nDropbox/Sparkle Malone/Teaching/EDS_course/data/products/predictions' already\nexists\n```\n:::\n\n```{.r .cell-code}\npredictions.dir <- paste(directory,\"/\",subDir, sep=\"\")\n```\n:::\n\nMake the forloop to make predictions for all 12 months.\n\n::: {.cell}\n\n```{.r .cell-code}\nfor ( i in 1:12){\n \n  print(i)\n  \n  model.rasters <- c(igbp.ct.r.2021, global.clim.tmean.resample[[i]], global.clim.ppt.resample[[i]] )\n  names(model.rasters) <- c(\"Upland\", \"TA_F\", \"P_F\" )\n  pred <- terra::predict(  object= model.rasters, model=FCH4_F_gC.rf)\n  \n  units(pred) <- 'g C m-2 month-1' # Add the units\n  names(pred ) <- \"F_CH4\" # Name the layer\n  \n  writeRaster(pred ,paste(predictions.dir,\"/\",\"MODEL_PRED_m\",i,\".tif\", sep =\"\"), overwrite=TRUE )\n}\n```\n:::\n\nDelete the json files created:\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(predictions.dir)\ndelete <- list.files( path = predictions.dir, pattern=\".json\")\nfile.remove(delete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n:::\n\nMake of list of all the files in a directory that you want to import, and import all the files in the list with `rast()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(predictions.dir)\npred <- list.files( path = predictions.dir, pattern=\"MODEL_PRED_m\")\npredictions <- rast(pred)\n```\n:::\n\n# (5) Use predictions\nCreate the 2021 methane budget. To get an annual budget, sum the total monthly fluxes.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions.2021.total <- sum(predictions )\nunits(predictions.2021.total ) <- 'g C m-2 year-1' # add the units\nnames(predictions.2021.total ) <- \"F_CH4\"\n```\n:::\n\nTo determine the total amount of methane in 2021 for natural areas we need to consider the area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nct.area = cellSize(predictions.2021.total, unit=\"m\")\npredictions.2021.total$F_CH4_total <- (predictions.2021.total$F_CH4 * ct.area)/1000000000000 \nunits(predictions.2021.total$F_CH4_total) <- \"Gigatons of carbon per year\"\n\n# Total emissions in 2021:\nglobal( predictions.2021.total$F_CH4_total, \"sum\", na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  sum\nF_CH4_total 0.1154527\n```\n:::\n:::\n\nNow you are ready to follow the same workflow for your model.\n(1) For your final project, determine where you will project your model.  \n(2) Make a list of the variables, their units, the exact name and class of each variable in your model.   \n(3) Determine where you can get a spatial version of each variable in your model.  \n(4) Format each spatial layer. \n(5) Make predictions. \n(6) Use predictions. \n\nEnsure your raster layers all have the same CRS and resolution!",
    "supporting": [
      "spatial_projections_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}